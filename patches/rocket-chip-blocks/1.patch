From 1132a5980335fe817aa634795b853ba87d7862bc Mon Sep 17 00:00:00 2001
From: Jiuyang Liu <liu@jiuyang.me>
Date: Sun, 24 Apr 2022 07:26:16 +0800
Subject: [PATCH] remove objectmodule

---
 src/main/scala/devices/gpio/GPIO.scala      | 22 ++--------
 src/main/scala/devices/gpio/OMGPIO.scala    | 27 ------------
 src/main/scala/devices/porgen/PorGen.scala  |  6 +--
 src/main/scala/devices/pwm/OM_PWM.scala     | 27 ------------
 src/main/scala/devices/pwm/PWM.scala        | 23 ++--------
 src/main/scala/devices/spi/OM_SPI.scala     | 48 ---------------------
 src/main/scala/devices/spi/OM_SPIXIP.scala  | 39 -----------------
 src/main/scala/devices/spi/SPI.scala        | 10 ++---
 src/main/scala/devices/spi/SPIFlash.scala   |  6 +--
 src/main/scala/devices/spi/TLSPI.scala      | 30 ++-----------
 src/main/scala/devices/spi/TLSPIFlash.scala | 43 ++----------------
 src/main/scala/devices/timer/OM_Timer.scala | 26 -----------
 src/main/scala/devices/timer/Timer.scala    | 20 ++-------
 src/main/scala/devices/uart/OM_UART.scala   | 36 ----------------
 src/main/scala/devices/uart/UART.scala      | 31 ++-----------
 src/main/scala/devices/wdt/OM_WDT.scala     | 25 -----------
 src/main/scala/devices/wdt/TLWDT.scala      | 21 ++-------
 src/main/scala/util/Devices.scala           |  5 +--
 src/main/scala/util/Hierarchy.scala         |  2 +-
 19 files changed, 33 insertions(+), 414 deletions(-)
 delete mode 100644 src/main/scala/devices/gpio/OMGPIO.scala
 delete mode 100644 src/main/scala/devices/pwm/OM_PWM.scala
 delete mode 100644 src/main/scala/devices/spi/OM_SPI.scala
 delete mode 100644 src/main/scala/devices/spi/OM_SPIXIP.scala
 delete mode 100644 src/main/scala/devices/timer/OM_Timer.scala
 delete mode 100644 src/main/scala/devices/uart/OM_UART.scala
 delete mode 100644 src/main/scala/devices/wdt/OM_WDT.scala

diff --git a/src/main/scala/devices/gpio/GPIO.scala b/src/main/scala/devices/gpio/GPIO.scala
index b834068..c822e5d 100644
--- a/src/main/scala/devices/gpio/GPIO.scala
+++ b/src/main/scala/devices/gpio/GPIO.scala
@@ -13,9 +13,9 @@ import freechips.rocketchip.subsystem._
 import freechips.rocketchip.tilelink._
 import freechips.rocketchip.devices.tilelink._
 import freechips.rocketchip.util._
-import freechips.rocketchip.diplomaticobjectmodel.DiplomaticObjectModelAddressing
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMComponent, OMRegister}
-import freechips.rocketchip.diplomaticobjectmodel.logicaltree.{LogicalModuleTree, LogicalTreeNode}
+
+
+
 
 import sifive.blocks.devices.pinctrl.{PinCtrl, Pin, BasePin, EnhancedPin, EnhancedPinCtrl}
 import sifive.blocks.util.{DeviceParams,DeviceAttachParams}
@@ -176,7 +176,6 @@ abstract class GPIO(busWidthBytes: Int, c: GPIOParams)(implicit p: Parameters)
     GPIOCtrlRegs.poe + dsOffset -> poeFields
   )
   regmap(mapping ++ dsRegMap :_*)
-  val omRegMap = OMRegister.convert(mapping:_*)
 
   //--------------------------------------------------
   // Actual Pinmux
@@ -247,19 +246,6 @@ abstract class GPIO(busWidthBytes: Int, c: GPIOParams)(implicit p: Parameters)
       iofPort.get.iof_1(pin).i.ival := inSyncReg(pin)
     }
   }}
-
-  val logicalTreeNode = new LogicalTreeNode(() => Some(device)) {
-    def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent] = Nil): Seq[OMComponent] = {
-      Seq(
-        OMGPIO(
-          hasIOF = c.includeIOF,
-          nPins = c.width,
-          memoryRegions = DiplomaticObjectModelAddressing.getOMMemoryRegions("GPIO", resourceBindings, Some(module.omRegMap)),
-          interrupts = DiplomaticObjectModelAddressing.describeGlobalInterrupts(device.describe(resourceBindings).name, resourceBindings),
-        )
-      )
-    }
-  }
 }
 
 class TLGPIO(busWidthBytes: Int, params: GPIOParams)(implicit p: Parameters)
@@ -312,8 +298,6 @@ case class GPIOAttachParams(
       case _: AsynchronousCrossing => where.ibus.fromAsync
     }) := gpio.intXing(intXType)
 
-    LogicalModuleTree.add(where.logicalTreeNode, gpio.logicalTreeNode)
-
     gpio
   }
 }
diff --git a/src/main/scala/devices/gpio/OMGPIO.scala b/src/main/scala/devices/gpio/OMGPIO.scala
deleted file mode 100644
index a02c586..0000000
--- a/src/main/scala/devices/gpio/OMGPIO.scala
+++ /dev/null
@@ -1,27 +0,0 @@
-package sifive.blocks.devices.gpio
-
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMDevice, OMInterrupt, OMMemoryRegion}
-
-case class OMGPIO(
-  hasIOF: Boolean,
-  nPins: Int,
-  memoryRegions: Seq[OMMemoryRegion],
-  interrupts: Seq[OMInterrupt],
-  _types: Seq[String] = Seq("OMGPIO", "OMDevice", "OMComponent"),
-) extends OMDevice
-
-/*
-   Copyright 2016 SiFive, Inc.
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-*/
diff --git a/src/main/scala/devices/porgen/PorGen.scala b/src/main/scala/devices/porgen/PorGen.scala
index 64cf801..86855db 100644
--- a/src/main/scala/devices/porgen/PorGen.scala
+++ b/src/main/scala/devices/porgen/PorGen.scala
@@ -12,9 +12,9 @@ import freechips.rocketchip.subsystem._
 import freechips.rocketchip.tilelink._
 import freechips.rocketchip.devices.tilelink._
 import freechips.rocketchip.util._
-import freechips.rocketchip.diplomaticobjectmodel.DiplomaticObjectModelAddressing
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMComponent, OMRegister}
-import freechips.rocketchip.diplomaticobjectmodel.logicaltree.{LogicalModuleTree, LogicalTreeNode}
+
+
+
 import sifive.blocks.util._
 
 // Ideally, we want SOFT(configurable) reset inputs like this. 
diff --git a/src/main/scala/devices/pwm/OM_PWM.scala b/src/main/scala/devices/pwm/OM_PWM.scala
deleted file mode 100644
index cb9d22a..0000000
--- a/src/main/scala/devices/pwm/OM_PWM.scala
+++ /dev/null
@@ -1,27 +0,0 @@
-package sifive.blocks.devices.pwm
-
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMDevice, OMInterrupt, OMMemoryRegion}
-
-case class OMPWM(
-  numComparators: Int,
-  compareWidth: Int,
-  memoryRegions: Seq[OMMemoryRegion],
-  interrupts: Seq[OMInterrupt],
-  _types: Seq[String] = Seq("OMPWM", "OMDevice", "OMComponent"),
-) extends OMDevice
-
-/*
-   Copyright 2016 SiFive, Inc.
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-*/
diff --git a/src/main/scala/devices/pwm/PWM.scala b/src/main/scala/devices/pwm/PWM.scala
index ca0621d..5340a99 100644
--- a/src/main/scala/devices/pwm/PWM.scala
+++ b/src/main/scala/devices/pwm/PWM.scala
@@ -14,9 +14,9 @@ import freechips.rocketchip.subsystem._
 import freechips.rocketchip.tilelink._
 import freechips.rocketchip.devices.tilelink._
 import freechips.rocketchip.util._
-import freechips.rocketchip.diplomaticobjectmodel.DiplomaticObjectModelAddressing
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMComponent, OMRegister}
-import freechips.rocketchip.diplomaticobjectmodel.logicaltree.{LogicalModuleTree, LogicalTreeNode}
+
+
+
 
 import sifive.blocks.util._
 
@@ -97,22 +97,7 @@ abstract class PWM(busWidthBytes: Int, val params: PWMParams)(implicit p: Parame
     //regmap((GenericTimer.timerRegMap(pwm, 0, params.regBytes)):_*)
     val mapping = (GenericTimer.timerRegMap(pwm, 0, params.regBytes))
     regmap(mapping:_*)
-    val omRegMap = OMRegister.convert(mapping:_*)
   }
-  val logicalTreeNode = new LogicalTreeNode(() => Some(device)) {
-    def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent] = Nil): Seq[OMComponent] = {
-      Seq(
-        OMPWM(
-          numComparators = params.ncmp,
-          compareWidth   = params.cmpWidth,
-          //TODO CHECK FOR REG BINDINGS memoryRegions = DiplomaticObjectModelAddressing.getOMMemoryRegions("UART", resourceBindings, Some(omRegMap)),
-          memoryRegions = DiplomaticObjectModelAddressing.getOMMemoryRegions("PWM", resourceBindings, Some(module.omRegMap)),
-          interrupts = DiplomaticObjectModelAddressing.describeGlobalInterrupts(device.describe(resourceBindings).name, resourceBindings),
-        )
-      )
-    }
-  }
-
 }
 
 class TLPWM(busWidthBytes: Int, params: PWMParams)(implicit p: Parameters)
@@ -165,8 +150,6 @@ case class PWMAttachParams(
       case _: AsynchronousCrossing => where.ibus.fromAsync
     }) := pwm.intXing(intXType)
 
-    LogicalModuleTree.add(where.logicalTreeNode, pwm.logicalTreeNode)
-
     pwm
   }
 }
diff --git a/src/main/scala/devices/spi/OM_SPI.scala b/src/main/scala/devices/spi/OM_SPI.scala
deleted file mode 100644
index a16d85a..0000000
--- a/src/main/scala/devices/spi/OM_SPI.scala
+++ /dev/null
@@ -1,48 +0,0 @@
-package sifive.blocks.devices.spi
-
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMDevice, OMInterrupt, OMMemoryRegion}
-
-trait baseSPI{
- def  rxDepth: Int
- def  txDepth: Int
- def  csWidthBits: Int
- def  frameBits: Int
- def  delayBits: Int
- def  divisorBits: Int
- def  coarseDelayBits: Int
- def  fineDelayBits: Int
- def  sampleDelayBits: Int
- def  defaultSampleDelay: Int
-}
-
-case class OMSPI(
-  rxDepth: Int,
-  txDepth: Int,
-  csWidthBits: Int,
-  frameBits: Int,
-  delayBits: Int,
-  divisorBits: Int,
-  coarseDelayBits: Int,
-  fineDelayBits: Int,
-  sampleDelayBits: Int,
-  defaultSampleDelay: Int,
-  memoryRegions: Seq[OMMemoryRegion],
-  interrupts: Seq[OMInterrupt],
-  _types: Seq[String] = Seq("OMSPI", "OMDevice", "OMComponent"),
-) extends baseSPI with OMDevice
-
-/*
-   Copyright 2016 SiFive, Inc.
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-*/
diff --git a/src/main/scala/devices/spi/OM_SPIXIP.scala b/src/main/scala/devices/spi/OM_SPIXIP.scala
deleted file mode 100644
index d49455c..0000000
--- a/src/main/scala/devices/spi/OM_SPIXIP.scala
+++ /dev/null
@@ -1,39 +0,0 @@
-package sifive.blocks.devices.spi
-
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMDevice, OMInterrupt, OMMemoryRegion}
-
-case class OMSPIXIP(
-  rxDepth: Int,
-  txDepth: Int,
-  csWidthBits: Int,
-  frameBits: Int,
-  delayBits: Int,
-  divisorBits: Int,
-  coarseDelayBits: Int,
-  fineDelayBits: Int,
-  sampleDelayBits: Int,
-  defaultSampleDelay: Int,
-  instructionAddressBytes: Int,
-  instructionPadLengthBits: Int,
-  memMapAddressBase: BigInt,
-  memMapAddressSizeBytes: BigInt,
-  memoryRegions: Seq[OMMemoryRegion],
-  interrupts: Seq[OMInterrupt],
-  _types: Seq[String] = Seq("OMSPIXIP", "OMDevice", "OMComponent"),
-) extends baseSPI with OMDevice
-
-/*
-   Copyright 2016 SiFive, Inc.
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-*/
diff --git a/src/main/scala/devices/spi/SPI.scala b/src/main/scala/devices/spi/SPI.scala
index d42720b..1604f1f 100644
--- a/src/main/scala/devices/spi/SPI.scala
+++ b/src/main/scala/devices/spi/SPI.scala
@@ -13,9 +13,9 @@ import freechips.rocketchip.regmapper._
 import freechips.rocketchip.subsystem._
 import freechips.rocketchip.tilelink._
 import freechips.rocketchip.devices.tilelink._
-import freechips.rocketchip.diplomaticobjectmodel.DiplomaticObjectModelAddressing
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMComponent, OMRegister}
-import freechips.rocketchip.diplomaticobjectmodel.logicaltree.{LogicalModuleTree, LogicalTreeNode}
+
+
+
 
 import sifive.blocks.util._
 
@@ -66,8 +66,6 @@ case class SPIAttachParams(
       case _: AsynchronousCrossing => where.ibus.fromAsync
     }) := spi.intXing(intXType)
 
-    LogicalModuleTree.add(where.logicalTreeNode, spi.logicalTreeNode)
-
     spi
   }
 }
@@ -138,8 +136,6 @@ case class SPIFlashAttachParams(
       case _: AsynchronousCrossing => where.ibus.fromAsync
     }) := qspi.intXing(intXType)
 
-    LogicalModuleTree.add(where.logicalTreeNode, qspi.logicalTreeNode)
-
     qspi
   }
 }
diff --git a/src/main/scala/devices/spi/SPIFlash.scala b/src/main/scala/devices/spi/SPIFlash.scala
index ac69788..e19e42b 100644
--- a/src/main/scala/devices/spi/SPIFlash.scala
+++ b/src/main/scala/devices/spi/SPIFlash.scala
@@ -2,9 +2,9 @@ package sifive.blocks.devices.spi
 
 import Chisel.{defaultCompileOptions => _, _}
 import freechips.rocketchip.util.CompileOptions.NotStrictInferReset
-import freechips.rocketchip.diplomaticobjectmodel.DiplomaticObjectModelAddressing
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMComponent, OMRegister}
-import freechips.rocketchip.diplomaticobjectmodel.logicaltree.{LogicalModuleTree, LogicalTreeNode}
+
+
+
 
 class SPIFlashInsn(c: SPIFlashParamsBase) extends SPIBundle(c) {
   val cmd = new Bundle with HasSPIProtocol {
diff --git a/src/main/scala/devices/spi/TLSPI.scala b/src/main/scala/devices/spi/TLSPI.scala
index 2e60bee..9398f1a 100644
--- a/src/main/scala/devices/spi/TLSPI.scala
+++ b/src/main/scala/devices/spi/TLSPI.scala
@@ -10,9 +10,9 @@ import freechips.rocketchip.interrupts._
 import freechips.rocketchip.subsystem._
 import freechips.rocketchip.util.HeterogeneousBag
 import sifive.blocks.util.{NonBlockingEnqueue, NonBlockingDequeue}
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMComponent, OMRegister}
-import freechips.rocketchip.diplomaticobjectmodel.logicaltree.{LogicalModuleTree, LogicalTreeNode}
-import freechips.rocketchip.diplomaticobjectmodel.DiplomaticObjectModelAddressing
+
+
+
 import sifive.blocks.util._
 
 trait SPIParamsBase {
@@ -195,31 +195,7 @@ class TLSPI(w: Int, c: SPIParams)(implicit p: Parameters)
     mac.io.link <> fifo.io.link
     val mapping = (regmapBase)
     regmap(mapping:_*)
-    val omRegMap = OMRegister.convert(mapping:_*)
   }
-
-  val logicalTreeNode = new LogicalTreeNode(() => Some(device)) {
-    def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent] = Nil): Seq[OMComponent] = {
-      Seq(
-        OMSPI(
-          rxDepth = c.rxDepth,
-          txDepth = c.txDepth,
-          csWidthBits = c.csWidth,
-          frameBits = c.frameBits,
-          delayBits = c.delayBits,
-          divisorBits = c.divisorBits,
-          coarseDelayBits = c.divisorBits,
-          fineDelayBits = c.fineDelayBits,
-          sampleDelayBits = c.sampleDelayBits,
-          defaultSampleDelay = c.defaultSampleDel,
-          memoryRegions = DiplomaticObjectModelAddressing.getOMMemoryRegions("SPI", resourceBindings, Some(module.omRegMap)),
-          interrupts = DiplomaticObjectModelAddressing.describeGlobalInterrupts(device.describe(resourceBindings).name, resourceBindings)
-        )
-      )
-    }
-  }
-
-
 }
 
 /*
diff --git a/src/main/scala/devices/spi/TLSPIFlash.scala b/src/main/scala/devices/spi/TLSPIFlash.scala
index 4d4e192..344b277 100644
--- a/src/main/scala/devices/spi/TLSPIFlash.scala
+++ b/src/main/scala/devices/spi/TLSPIFlash.scala
@@ -8,9 +8,9 @@ import freechips.rocketchip.regmapper._
 import freechips.rocketchip.tilelink._
 import freechips.rocketchip.subsystem._
 import freechips.rocketchip.util.HeterogeneousBag
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMComponent, OMRegister}
-import freechips.rocketchip.diplomaticobjectmodel.logicaltree.{LogicalModuleTree, LogicalTreeNode}
-import freechips.rocketchip.diplomaticobjectmodel.DiplomaticObjectModelAddressing
+
+
+
 import sifive.blocks.util._
 
 trait SPIFlashParamsBase extends SPIParamsBase {
@@ -140,44 +140,7 @@ class TLSPIFlash(w: Int, c: SPIFlashParams)(implicit p: Parameters)
 
     val totalMapping = (regmapBase ++ regmapFlash)
     regmap(totalMapping:_*)
-    val omRegMap = OMRegister.convert(totalMapping:_*)
   }
-
-  val logicalTreeNode = new LogicalTreeNode(() => Some(device)) {
-    def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent] = Nil): Seq[OMComponent] = {
-      // Get all the memory regions, but don't associate a register map to any of them yet
-      val diplomaticRegions = DiplomaticObjectModelAddressing.getOMMemoryRegions("SPIXIP", resourceBindings/*, Some(module.omRegMap)*/)
-      // The regmap goes with the "control" region so add it and don't alter the others.
-      require(diplomaticRegions.exists(_.description == "control"),
-        "There should be a memory region with description \"control\" to connect the regmap to")
-      val memoryRegions = diplomaticRegions.map{ memRegion =>
-        if (memRegion.description == "control") { memRegion.copy(registerMap = Some(module.omRegMap)) } else {memRegion}
-      }
-
-      Seq(
-        OMSPIXIP(
-          rxDepth = c.rxDepth,
-          txDepth = c.txDepth,
-          csWidthBits = c.csWidth,
-          frameBits = c.frameBits,
-          delayBits = c.delayBits,
-          divisorBits = c.divisorBits,
-          coarseDelayBits = c.divisorBits,
-          fineDelayBits = c.fineDelayBits,
-          sampleDelayBits = c.sampleDelayBits,
-          defaultSampleDelay = c.defaultSampleDel,
-          instructionAddressBytes = c.insnAddrBytes,
-          instructionPadLengthBits = c.insnPadLenBits,
-          memMapAddressBase = c.fAddress,
-          memMapAddressSizeBytes = c.fSize,
-          memoryRegions = memoryRegions,
-          interrupts = DiplomaticObjectModelAddressing.describeGlobalInterrupts(device.describe(resourceBindings).name, resourceBindings)
-        )
-      )
-    }
-  }
-
-
 }
 
 /*
diff --git a/src/main/scala/devices/timer/OM_Timer.scala b/src/main/scala/devices/timer/OM_Timer.scala
deleted file mode 100644
index cd73f3a..0000000
--- a/src/main/scala/devices/timer/OM_Timer.scala
+++ /dev/null
@@ -1,26 +0,0 @@
-package sifive.blocks.devices.timer
-
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMDevice, OMInterrupt, OMMemoryRegion}
-
-case class OMTimer(
-  comparatorWidthBits: Int,
-  memoryRegions: Seq[OMMemoryRegion],
-  interrupts: Seq[OMInterrupt],
-  _types: Seq[String] = Seq("OMTimer", "OMDevice", "OMComponent"),
-) extends OMDevice
-
-/*
-   Copyright 2016 SiFive, Inc.
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-*/
diff --git a/src/main/scala/devices/timer/Timer.scala b/src/main/scala/devices/timer/Timer.scala
index 50a55aa..e951951 100644
--- a/src/main/scala/devices/timer/Timer.scala
+++ b/src/main/scala/devices/timer/Timer.scala
@@ -12,9 +12,9 @@ import freechips.rocketchip.regmapper.{RegisterRouter, RegisterRouterParams}
 import freechips.rocketchip.subsystem._
 import freechips.rocketchip.tilelink._
 import freechips.rocketchip.devices.tilelink._
-import freechips.rocketchip.diplomaticobjectmodel.DiplomaticObjectModelAddressing
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMComponent, OMRegister}
-import freechips.rocketchip.diplomaticobjectmodel.logicaltree.{LogicalModuleTree, LogicalTreeNode}
+
+
+
 
 import sifive.blocks.util._
 import sifive.blocks.devices.pwm._
@@ -46,18 +46,6 @@ class Timer(w: Int, c: TimerParams)(implicit p: Parameters)
     interrupts := timer.io.ip
     val mapping = (GenericTimer.timerRegMap(timer, 0, c.regBytes))
     regmap(mapping:_*)
-    val omRegMap = OMRegister.convert(mapping:_*)  
-  }
-  val logicalTreeNode = new LogicalTreeNode(() => Some(device)) {
-    def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent] = Nil): Seq[OMComponent] = {
-      Seq(
-        OMTimer(
-          comparatorWidthBits = c.cmpWidth,
-          memoryRegions = DiplomaticObjectModelAddressing.getOMMemoryRegions("Timer", resourceBindings, Some(module.omRegMap)),
-          interrupts = DiplomaticObjectModelAddressing.describeGlobalInterrupts(device.describe(resourceBindings).name, resourceBindings)
-        )
-      )
-    }
   }
 }
 
@@ -123,8 +111,6 @@ case class TimerAttachParams(
       case _: AsynchronousCrossing => where.ibus.fromAsync
     }) := timer.intXing(intXType)
 
-    LogicalModuleTree.add(where.logicalTreeNode, timer.logicalTreeNode)
-
     timer
   }
 }
diff --git a/src/main/scala/devices/uart/OM_UART.scala b/src/main/scala/devices/uart/OM_UART.scala
deleted file mode 100644
index a303382..0000000
--- a/src/main/scala/devices/uart/OM_UART.scala
+++ /dev/null
@@ -1,36 +0,0 @@
-package sifive.blocks.devices.uart
-
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMDevice, OMInterrupt, OMMemoryRegion}
-
-case class OMUART(
-  divisorWidthBits: Int,
-  divisorInit: Int,
-  nRxEntries: Int,
-  nTxEntries: Int,
-  dataBits: Int,
-  stopBits: Int,
-  oversample: Int,
-  nSamples: Int,
-  includeFourWire: Boolean,
-  includeParity: Boolean,
-  includeIndependentParity: Boolean,
-  memoryRegions: Seq[OMMemoryRegion],
-  interrupts: Seq[OMInterrupt],
-  _types: Seq[String] = Seq("OMUART", "OMDevice", "OMComponent"),
-) extends OMDevice
-
-/*
-   Copyright 2016 SiFive, Inc.
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-*/
diff --git a/src/main/scala/devices/uart/UART.scala b/src/main/scala/devices/uart/UART.scala
index 45f4e88..eb57423 100755
--- a/src/main/scala/devices/uart/UART.scala
+++ b/src/main/scala/devices/uart/UART.scala
@@ -12,9 +12,9 @@ import freechips.rocketchip.subsystem._
 import freechips.rocketchip.tilelink._
 import freechips.rocketchip.devices.tilelink._
 import freechips.rocketchip.util._
-import freechips.rocketchip.diplomaticobjectmodel.DiplomaticObjectModelAddressing
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMComponent, OMRegister}
-import freechips.rocketchip.diplomaticobjectmodel.logicaltree.{LogicalModuleTree, LogicalTreeNode}
+
+
+
 
 import sifive.blocks.util._
 
@@ -197,30 +197,7 @@ class UART(busWidthBytes: Int, val c: UARTParams, divisorInit: Int = 0)
       RegField(1, data8or9,
                RegFieldDesc("databits8or9","Data Bits to be 8(1) or 9(0)", reset=Some(1)))))) else Nil
   regmap(mapping ++ optionalparity ++ optionalwire4 ++ optional8or9:_*)
-  val omRegMap = OMRegister.convert(mapping ++ optionalparity ++ optionalwire4 ++ optional8or9:_*)
 }
-
-  val logicalTreeNode = new LogicalTreeNode(() => Some(device)) {
-    def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent] = Nil): Seq[OMComponent] = {
-      Seq(
-        OMUART(
-          divisorWidthBits = c.divisorBits,
-          divisorInit = divisorInit,
-          nRxEntries = c.nRxEntries,
-          nTxEntries = c.nTxEntries,
-          dataBits = c.dataBits,
-          stopBits = c.stopBits,
-          oversample = c.oversample,
-          nSamples = c.nSamples,
-          includeFourWire = c.includeFourWire,
-          includeParity = c.includeParity,
-          includeIndependentParity = c.includeIndependentParity,
-          memoryRegions = DiplomaticObjectModelAddressing.getOMMemoryRegions("UART", resourceBindings, Some(module.omRegMap)),
-          interrupts = DiplomaticObjectModelAddressing.describeGlobalInterrupts(device.describe(resourceBindings).name, resourceBindings),
-        )
-      )
-    }
-  }
 }
 class TLUART(busWidthBytes: Int, params: UARTParams, divinit: Int)(implicit p: Parameters)
   extends UART(busWidthBytes, params, divinit) with HasTLControlRegMap
@@ -273,8 +250,6 @@ case class UARTAttachParams(
       case _: AsynchronousCrossing => where.ibus.fromAsync
     }) := uart.intXing(intXType)
 
-    LogicalModuleTree.add(where.logicalTreeNode, uart.logicalTreeNode)
-
     uart
   }
 }
diff --git a/src/main/scala/devices/wdt/OM_WDT.scala b/src/main/scala/devices/wdt/OM_WDT.scala
deleted file mode 100644
index cec9220..0000000
--- a/src/main/scala/devices/wdt/OM_WDT.scala
+++ /dev/null
@@ -1,25 +0,0 @@
-package sifive.blocks.devices.wdt
-
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMDevice, OMInterrupt, OMMemoryRegion}
-
-case class OMWDT(
-  memoryRegions: Seq[OMMemoryRegion],
-  interrupts: Seq[OMInterrupt],
-  _types: Seq[String] = Seq("OMWDT", "OMDevice", "OMComponent"),
-) extends OMDevice
-
-/*
-   Copyright 2016 SiFive, Inc.
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-*/
diff --git a/src/main/scala/devices/wdt/TLWDT.scala b/src/main/scala/devices/wdt/TLWDT.scala
index cd61118..d9f6cae 100644
--- a/src/main/scala/devices/wdt/TLWDT.scala
+++ b/src/main/scala/devices/wdt/TLWDT.scala
@@ -14,9 +14,9 @@ import freechips.rocketchip.tilelink._
 import freechips.rocketchip.subsystem._
 import freechips.rocketchip.devices.tilelink._
 import freechips.rocketchip.util._
-import freechips.rocketchip.diplomaticobjectmodel.DiplomaticObjectModelAddressing
-import freechips.rocketchip.diplomaticobjectmodel.model.{OMComponent, OMRegister}
-import freechips.rocketchip.diplomaticobjectmodel.logicaltree.{LogicalModuleTree, LogicalTreeNode}
+
+
+
 
 import sifive.blocks.util._
 import sifive.blocks.devices.mockaon.WatchdogTimer
@@ -52,20 +52,7 @@ abstract class WDT(busWidthBytes: Int, val params: WDTParams)(implicit p: Parame
     //regmap((GenericTimer.timerRegMap(wdt, 0, params.regBytes)):_*)
     val mapping = (GenericTimer.timerRegMap(wdt, 0, params.regBytes))
     regmap(mapping:_*)
-    val omRegMap = OMRegister.convert(mapping:_*)  
-  }
-
-  val logicalTreeNode = new LogicalTreeNode(() => Some(device)) {
-    def getOMComponents(resourceBindings: ResourceBindings, children: Seq[OMComponent] = Nil): Seq[OMComponent] = {
-      Seq(
-        OMWDT(
-          memoryRegions = DiplomaticObjectModelAddressing.getOMMemoryRegions("WDT", resourceBindings, Some(module.omRegMap)),
-          interrupts = DiplomaticObjectModelAddressing.describeGlobalInterrupts(device.describe(resourceBindings).name, resourceBindings)
-        )
-      )
-    }
   }
-
 }
 
 class TLWDT(busWidthBytes: Int, params: WDTParams)(implicit p: Parameters)
@@ -118,8 +105,6 @@ case class WDTAttachParams(
       case _: AsynchronousCrossing => where.ibus.fromAsync
     }) := wdt.intXing(intXType)
 
-    LogicalModuleTree.add(where.logicalTreeNode, wdt.logicalTreeNode)
-
     wdt
   }
 }
diff --git a/src/main/scala/util/Devices.scala b/src/main/scala/util/Devices.scala
index a91589f..b36a5ef 100644
--- a/src/main/scala/util/Devices.scala
+++ b/src/main/scala/util/Devices.scala
@@ -4,7 +4,7 @@ import Chisel.{defaultCompileOptions => _, _}
 import freechips.rocketchip.util.CompileOptions.NotStrictInferReset
 
 import freechips.rocketchip.config.{Field, Parameters}
-import freechips.rocketchip.diplomaticobjectmodel.logicaltree.LogicalTreeNode
+
 import freechips.rocketchip.tilelink._
 import freechips.rocketchip.diplomacy._
 import freechips.rocketchip.prci._
@@ -43,8 +43,7 @@ class DevicesSubsystem(
   val hierarchyName: String,
   val location: HierarchicalLocation,
   val ibus: InterruptBusWrapper,
-  val asyncClockGroupsNode: ClockGroupEphemeralNode,
-  val logicalTreeNode: LogicalTreeNode)(implicit p: Parameters) extends LazyModule
+  val asyncClockGroupsNode: ClockGroupEphemeralNode)(implicit p: Parameters) extends LazyModule
     with Attachable
     with HasConfigurableTLNetworkTopology
     with CanHaveDevices {
diff --git a/src/main/scala/util/Hierarchy.scala b/src/main/scala/util/Hierarchy.scala
index bbd317d..fe6c8ce 100644
--- a/src/main/scala/util/Hierarchy.scala
+++ b/src/main/scala/util/Hierarchy.scala
@@ -32,7 +32,7 @@ trait HasConfigurableHierarchy { this: Attachable =>
         location = edge,
         ibus = context.ibus,
         asyncClockGroupsNode = context.asyncClockGroupsNode,
-        logicalTreeNode = context.logicalTreeNode)) }
+        )) }
       dss.suggestName(edge.name)
       createHierarchyMap(edge, graph, dss)
     }
